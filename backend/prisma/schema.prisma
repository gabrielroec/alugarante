generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Board {
  id        Int      @id @default(autoincrement())
  name      String
  columns   Column[] // Relacionamento com as Columns
}

model Column {
  id        Int      @id @default(autoincrement())
  name      String
  boardId   Int
  board     Board    @relation(fields: [boardId], references: [id])
  cards     Card[]   // Relacionamento com os Cards
}

model Imovel {
  id                    Int      @id @default(autoincrement())
  tipoImovelSelecionado String
  valorAluguel          Float
  valorIptu             Float
  valorCondominio       Float
  valorGas              Float
  planoSelecionado      String
  valorMensal           Float
  taxaSetup             Float
  card                  Card?    @relation(fields: [cardId], references: [id])
  cardId                Int      @unique // Defina o campo como único
}

model Proprietario {
  id                      Int      @id @default(autoincrement())
  tipoPessoa              String
  cnpj                    String?
  razaoSocial             String?
  estadoCivil             String
  cpfConjuge              String?
  nomeCompleto            String
  nomeCompletoConjuge     String?
  email                   String
  telefone                String
  nacionalidade           String
  naturalidade            String
  dataNascimento          DateTime
  cpf                     String
  rg                      String
  orgaoExpedidor          String
  emailConjuge            String?
  telefoneConjuge         String?
  nacionalidadeConjuge    String?
  naturalidadeConjuge     String?
  dataNascimentoConjuge   DateTime?
  rgConjuge               String?
  orgaoExpedidorConjuge   String?
  cep                     String
  estado                  String
  bairro                  String
  endereco                String
  numero                  String
  complemento             String?

  // Campos para armazenar anexos
  anexoCpfRgMotorista     String?  // Caminho do arquivo do proprietário
  anexoCpfRgMotoristaConj String?  // Caminho do arquivo do cônjuge
  anexoEstadoCivil        String?  // Caminho do comprovante de estado civil
  anexoResidencia         String?  // Caminho do comprovante de residência
  anexoContratoSocial     String?  // Caminho do contrato social (caso empresa)

  card                    Card?    @relation(fields: [cardId], references: [id])
  cardId                  Int      @unique
}

model ImovelDetalhes {
  id                    Int      @id @default(autoincrement())
  finalidade            String
  tipoImovel            String
  valorAluguel          Float
  valorCondominio       Float
  valorIptu             Float?
  valorAgua             Float?
  valorGas              Float?
  administradorNome     String?
  administradorTelefone String?
  cepImovel             String
  cidade                String
  estado                String
  bairro                String
  endereco              String
  numero                String
  complemento           String?

  // Campos para armazenar anexos do imóvel
  anexoCondominio       String?  // Caminho do comprovante de condomínio
  anexoIptu             String?  // Caminho do comprovante de IPTU
  anexoAgua             String?  // Caminho da última conta de água
  anexoLuz              String?  // Caminho da última conta de luz
  anexoEscritura        String?  // Caminho da escritura do imóvel

  card                  Card?    @relation(fields: [cardId], references: [id])
  cardId                Int      @unique
}

model Locatario {
  id                    Int      @id @default(autoincrement())
  tipoPessoa            String
  nomeCompleto          String
  email                 String
  telefone              String
  nacionalidade         String
  naturalidade          String
  estadoCivil           String
  dataNascimento        DateTime
  cpf                   String?
  rg                    String?
  orgaoExpedidor        String?
  cnpj                  String?
  razaoSocial           String?
  cep                   String
  estado                String
  bairro                String
  endereco              String
  numero                String
  complemento           String?

  // Campos para armazenar anexos do locatário
  anexoCpfRgMotoristaLocatario   String?  // Caminho do arquivo do locatário
  anexoEstadoCivilLocatario      String?  // Caminho do comprovante de estado civil do locatário
  anexoResidenciaLocatario       String?  // Caminho do comprovante de residência do locatário
  anexoContratoSocialLocatario   String?  // Caminho do contrato social (caso empresa)
  anexoUltimoBalancoLocatario    String?  // Caminho do último balanço financeiro do locatário

  card                  Card?    @relation(fields: [cardId], references: [id])
  cardId                Int      @unique
}

model Card {
  id                    Int         @id @default(autoincrement())
  columnId              Int
  column                Column      @relation(fields: [columnId], references: [id], onDelete: Cascade)
  
  // Relacionamentos
  imovel                Imovel?
  proprietario          Proprietario?
  imovelDetalhes        ImovelDetalhes?
  locatario             Locatario?

  // Campo para armazenar múltiplos anexos no card
  anexos                Json?       // JSON para armazenar lista de arquivos anexados posteriormente

  createdAt             DateTime    @default(now())
}

model User {
  id        Int     @id @default(autoincrement())
  nome      String
  telefone     String
  email     String  @unique
  senha    String
  foto     String? // Foto pode ser opcional
  isAdmin   Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}